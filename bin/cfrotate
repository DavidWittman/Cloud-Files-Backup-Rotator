#!/usr/bin/env python

import os
from argparse import ArgumentParser, ArgumentError

from cfrotate import CloudFilesRotate

def env(e):
    return os.environ.get(e, '')

def main():
    parser = ArgumentParser(description="A backup rotator for use with "\
                                        "Rackspace Cloud Files and OpenStack "\
                                        "Swift.")

    auth_group = parser.add_argument_group('Authentication Options')
    auth_group.add_argument('-u', '--username',
                            dest = 'username',
                            default = env('CLOUD_FILES_USERNAME'),
                            help = "Defaults to env[CLOUD_FILES_USERNAME]")
    auth_group.add_argument('-k', '--apikey',
                            dest = 'apikey',
                            default = env('CLOUD_FILES_APIKEY'),
                            help = "Defaults to env[CLOUD_FILES_APIKEY]")
    auth_group.add_argument("-a", "--auth_url", 
                            dest = "auth_url", 
                            help = "Authentication endpoint. "\
                                   "Defaults to env[CLOUD_FILES_AUTH_URL]",
                            default = env('CLOUD_FILES_AUTH_URL') )
    auth_group.add_argument('-s', '--snet',
                            action = 'store_true',
                            dest = 'snet',
                            help = "Use ServiceNet for connections",
                            default = False)

    backup_group = parser.add_argument_group('Backup Options')
    backup_group.add_argument('-r', '--rotate',
                              dest = 'count',
                              help = "Number of backups to rotate",
                              type = int,
                              default = 7)

    parser.add_argument('container',
                        help = "Cloud Files Container for the backup")
    parser.add_argument('path',
                        help = "File or directory to backup")

    args = parser.parse_args()

    # Verify supplied arguments are valid
    required = {
                "username": "Username",
                "apikey": "API key",
                "auth_url": "Authentication URL"
               }
    for k in required:
        if not hasattr(args, k) or getattr(args, k) is '':
            raise ArgumentError(None, "%s is required" % required[k])

    cfr = CloudFilesRotate(args.username, 
                           args.apikey, 
                           args.container,
                           args.auth_url,
                           args.snet)

    (added, removed) = cfr.rotate(args.path, args.count)
    print "%d file(s) uploaded.\n%d file(s) removed." % (added, removed)

if __name__ == '__main__':
    try:
        main()
    except ArgumentError as e:
        print "[ERROR] %s: %s" % (e.__class__.__name__, e)
        raise SystemExit(2)
    except Exception as e:
        print "[ERROR] %s: %s" % (e.__class__.__name__, e)
        raise SystemExit(1)

